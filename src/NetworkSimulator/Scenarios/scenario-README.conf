#
# Description of a IoP Network Simulator scenario consist of a series of simple commands.
# Empty lines and comment lines are ignored. Empty line is any line without non-whitespace character.
# Comment line is a line starting with '#'.
#
# Spaces are used for separation of tokens and not allowed in parameter values. For decimal numbers, 
# use '.' as a decimal separator. For large numbers, do not use any thousand separator.
#
#
# COMMANDS:
#
# ProfileServer
# ~~~~~~~~~~~~~
# Creates one or more profile servers with associated LOC server. The servers are not started until 
# StartServer is called. This allows creating the neighborhoods before the servers start, which better 
# mimic the real life scenarios. 
#
# Usage: ProfileServer <GroupName> <Count> <BasePort> <Latitude> <Longitude> <Radius>
#  * GroupName - Name of the group of profile servers. Each profile server will be created with its own 
#                name, which constists of the GroupName as a prefix and a 3 digit suffix, which is the index 
#                of the instance in the group. 'Count' instances are going to be created with first instance 
#                named GroupName + "001", second instance named GroupName + "002" etc.
#  * Count - Number of instances to create. An integer between 1 and 999.
#  * BasePort - TCP port number from which TCP ports of each profile server and associated LOC servers 
#               are to be calculated. For each server instance in the group, there are 20 ports allocated.
#               This means that instance number 001 is going to use ports between BasePort and BasePort + 19,
#               instance number 002 is going to use ports between BasePort + 20 and BasePort + 39, etc.
#  * Latitude - GPS latitude in the decimal form of the target area centre. 
#  * Longitude - GPS longitude in the decimal form of the target area centre.
#  * Radius - Radius in metres that together with Latitude and Longitude specify the target area, in which 
#             a random location will be selected for each instance as its location. Value of 0 means that 
#             all servers will be created in the exact location given by Latitude and Longitude. Maximal 
#             Radius is 20,000,000.
#
#
#
# StartServer
# ~~~~~~~~~~~
# Starts one or more profile servers.
#
# Usage: StartServer <PsGroup> <PsIndex> <PsCount>
#  * PsGroup - Name of the server group, which servers are going to be started.
#  * PsIndex - Index of the first server from the group. First server in the group has index 1.
#  * PsCount - Number of servers to start. Index of the last server from the group that will be started 
#              is PsIndex + PsCount - 1.
#
#
# StopServer
# ~~~~~~~~~~
# Stops one or more profile servers.
#
# Usage: StopServer <PsGroup> <PsIndex> <PsCount>
#  * PsGroup - Name of the server group, which servers are going to be stopped.
#  * PsIndex - Index of the first server from the group. First server in the group has index 1.
#  * PsCount - Number of servers to stop. Index of the last server from the group that will be started 
#              is PsIndex + PsCount - 1.
#
#
# Neighborhood
# ~~~~~~~~~~~~
# Forms a bidirectional neighborhood relationship between all servers selected by the command. 
#
# Usage: Neighborhood <PsGroup1> <PsIndex1> <PsCount1> [<PsGroup2> <PsIndex2> <PsCount2> ...]
#  * PsGroup$i - Name of the $i-th group of servers.
#  * PsIndex$i - Instance number of the first server from the $i-th group. First server in a group has index 1.
#  * PsCount$i - Number of servers to take from the $i-th group. Index of the last server from the $i-th group 
#                that will be used is PsIndex$i + PsCount$i - 1.
#
#
#
# CancelNeighborhood
# ~~~~~~~~~~~~~~~~~~
# Cancels a bidirectional neighborhood relationship between all servers selected by the command. 
#
# Usage: CancelNeighborhood <PsGroup1> <PsIndex1> <PsCount1> [<PsGroup2> <PsIndex2> <PsCount2> ...]
#  * PsGroup$i - Name of the $i-th group of servers.
#  * PsIndex$i - Instance number of the first server from the $i-th group. First server in a group has index 1.
#  * PsCount$i - Number of servers to take from the $i-th group. Index of the last server from the $i-th group 
#                that will be used is PsIndex$i + PsCount$i - 1.
#
#
#
# Neighbor
# ~~~~~~~~
# Forms an unidirectional neighborhood relationship between a source server and one or more target servers.
#
# Usage: Neighbor <Source> <Target1> [Target2 ...]
#  * Source - Name of the source server instance.
#  * Target$i - Name of the $i-th target server instance.
#
#
#
# CancelNeighbor
# ~~~~~~~~~~~~~~
# Cancels an unidirectional neighborhood relationship between a source server and one or more target servers.
#
# Usage: CancelNeighbor <Source> <Target1> [Target2 ...]
#  * Source - Name of the source server instance.
#  * Target$i - Name of the $i-th target server instance.
#
#
#
# Identity
# ~~~~~~~~
# Spawns one or more identities and establishes profile hosting agreements with existing profile servers for 
# them and performs profile initialization for them.
#
# Usage: Identity <Name> <Count> <Type> <Latitude> <Longitude> <Radius> <ProfileImageMask> <ProfileImageChance> <ThumbnailImageMask> <ThumbnailImageChance> <PsGroup> 
#                 <PsIndex> <PsCount>
#  * Name - Name of the identity group. Each identity will be created with its own name, which consists 
#           of the Name as a prefix and a 5 digit suffix, which is the index of the instance in the group. 
#           'Count' instances are going to be created with first instance named Name + "00001", second 
#           instance named Name + "00002" etc.
#  * Count - Number of instances to create. An integer between 1 and 99999, but Count / PsCount must not be 
#            greater than 20,000.
#  * Type - Identity type.
#  * Latitude - GPS latitude in the decimal form of the target area centre.
#  * Longitude - GPS longitude in the decimal form of the target area centre.
#  * Radius - Radius in metres that together with Latitude and Longitude specify the target area, in which 
#             a random location will be selected for each instance as its location. Value of 0 means that 
#             all identities will be created in the exact location given by Latitude and Longitude. Maximal 
#             Radius is 20,000,000.
#  * ProfileImageMask - File name mask in the images folder that define which images can be randomly selected 
#                       for identity profiles as their profile images.
#  * ProfileImageChance - An integer between 0 and 100 that specifies the chance of each instance to have 
#                         a profile image set. If set to 0, ImageMask is ignored and no identity is initialized 
#                         with a profile image. If set to 100, all identities are initialized with profile images.
#  * ThumbnailImageMask - Same as `ProfileImageMask`, just for thumbnail image of profiles.
#  * ThumbnailImageChance - Same as `ProfileImageChance`, just for thumbnail image of profiles.
#  * PsGroup - Name of the server group, which servers are going to host the newly created identities.
#              The profile server for each identity is selected randomly from the selected list of servers.
#  * PsIndex - Index of the first server from the group. First server in the group has index 1.
#  * PsCount - Number of servers to take from the group. Index of the last server from the group that will 
#              be used is PsIndex + PsCount - 1.
#
#
# CancelIdentity
# ~~~~~~~~~~~~~~
# Cancels hosting agreements of one or more identities with their profile servers.
#
# Usage: CancelIdentity <Name> <Index> <Count>
#  * Name - Name of the identity group. 
#  * Index - Index of the first identity from the group. First identity in the group has index 1.
#  * Count - Number of identities to take from the group. Index of the last identity from the group that will 
#            be used is Index + Count - 1.
#
#
#
# TestQuery
# ~~~~~~~~~
# Performs one or more search queries against specific servers and verifies that the results match 
# the expected values.
#
# Usage: TestQuery <PsGroup> <PsIndex> <PsCount> <Name> <Type> <IncludeImages> <Latitude> <Longitude> <Radius>
#  * PsGroup - Name of the server group, which servers are going to be queried. Each server will be send 
#              a single search query.
#  * PsIndex - Index of the first server from the group. First server in the group has index 1.
#  * PsCount - Number of servers to take from the group. Index of the last server from the group that will 
#              be used is PsIndex + PsCount - 1.
#  * Name - Wildcard profile name filter for the search query. See `ProfileSearchRequest.name` in 
#           the protocol definition. If this is set to "**", no name filter will be used.
#  * Type - Wildcard profile type filter for the search query. See `ProfileSearchRequest.type` in 
#           the protocol definition. If this is set to "**", no type filter will be used.
#  * IncludeImages - "True" if the query should request profile images, "False" otherwise.
#  * Latitude - GPS latitude in the decimal form of the target area centre, or string "NO_LOCATION" 
#               if location filter is not to be used. 
#  * Longitude - GPS longitude in the decimal form of the target area centre, or string "NO_LOCATION" 
#                if location filter is not to be used. 
#  * Radius - If Latitude is not "NO_LOCATION", this is radius in metres that together with Latitude and 
#             Longitude specify the target area, in which a random location will be selected for each 
#             instance as its location. Maximal radius is 20,000,000.
#
#
#
# Delay
# ~~~~~
# Waits specified amount of time before executing next command. This command should be used after every command 
# that may cause some activity between the profile servers.
#
# Usage: Delay <Seconds>
#  * Seconds - Number of seconds to wait as a positive decimal number.
#
#
#
# TakeSnapshot
# ~~~~~~~~~~~~
# Saves the current state of the simulation to the directory under the snapshots folder. The snapshot can be 
# later reverted, even from different scenario, using LoadSnapshot command. Before calling TakeSnapshot, 
# it is recommended that there is no activity between the servers. This command stops all servers before 
# taking the snapshot.
#
# Usage: TakeSnapshot <Name>
#  * Name - Name of the snapshot. If a folder of this name exists in the snapshots folder, it will be replaced.
#
#
#
# LoadSnapshot
# ~~~~~~~~~~~~
# Restores the state of the simulation from the directory under the snapshots folder. If this command is used 
# it must be the very first command in the scenario, otherwise it fails..
#
# Usage: LoadSnapshot <Name>
#  * Name - Name of the snapshot.
#
#
#

